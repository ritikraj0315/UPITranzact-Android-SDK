plugins {
    alias(libs.plugins.androidLibrary)
    id("maven-publish")
    id("signing")
}

android {
    namespace = "com.upitranzact.upitranzact"
    compileSdk = 34

    defaultConfig {
        minSdk = 26
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    packaging {
        resources {
            excludes += listOf("META-INF/AL2.0", "META-INF/LGPL2.1")
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.activity)
    implementation(libs.constraintlayout)
    testImplementation(libs.junit)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)

    implementation("com.android.volley:volley:1.2.1")
    implementation("com.squareup.okhttp3:okhttp:4.9.0")
    implementation("androidx.appcompat:appcompat:1.3.1")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1")
    implementation("com.google.code.gson:gson:2.8.8")
    implementation("com.makeramen:roundedimageview:2.3.0")
    implementation("com.airbnb.android:lottie:6.1.0")
    implementation("com.google.zxing:core:3.5.2")
    implementation("com.journeyapps:zxing-android-embedded:4.3.0")
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "com.upitranzact" // Replace with your unique Group ID
            artifactId = "upitranzact" // Replace with your library name
            version = "1.0.0" // Replace with your version

            afterEvaluate {
                from components.release // Publishes the release build
            }

            pom {
                name.set("UPITranzact Library")
                description.set("A library for UPI transaction management.")
                url.set("https://github.com/your-username/your-repo") // Update with your GitHub repo URL

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }

                developers {
                    developer {
                        id.set("your-username") // Your developer ID
                        name.set("Your Name") // Your full name
                        email.set("your-email@example.com") // Your email
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/your-username/your-repo.git")
                    developerConnection.set("scm:git:ssh://github.com/your-username/your-repo.git")
                    url.set("https://github.com/your-username/your-repo")
                }
            }
        }
    }
}


signing {
    useInMemoryPgpKeys(
            findProperty("signing.keyId")?.toString(),
            findProperty("signing.secretKeyRingFile")?.toString(),
            findProperty("signing.password")?.toString()
    )
    sign(publishing.publications)
}
